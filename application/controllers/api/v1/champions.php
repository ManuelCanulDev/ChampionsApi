<?php
/*
Generated by Manuigniter v2.0
www.manuigniter.com
 */

defined('BASEPATH') or exit('No direct script access allowed');
require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");

class champions extends REST_Controller
{
    private $code01 = '001'; //CODIGO CORRECTO.
    private $code02 = '002'; //VALOR NO ENCONTRADO.
    private $code03 = '003'; //FALTAN PARAMETROS.
    private $code04 = '004'; //CODIGO NO CORRECTO.

    public function __construct()
    {
        parent::__construct();
        $this->load->model('Champions_model');
        $this->load->model('Habilities_model');
        $this->load->model('Stats_model');
        $this->load->model('Tips_model');
    }

    public function get_all_get()
    {

        $total_rows = $this->Champions_model->get_all_champions_count();

        $per_page = 10;

        $uri_segment = 5;

        $page = ($this->uri->segment(5)) ? $this->uri->segment(5) : 0;

        //$query = $this->Champions_model->get_all_champions();

        $champions = $this->Champions_model->get_all_champions(array('limit' => $per_page, 'offset' => $page));

        $champion_habilities = $this->Habilities_model->get_all_habilities();

        $champion_stats = $this->Stats_model->get_all_stats();

        $champion_tips = $this->Tips_model->get_all_tips();

        if (count($champions) > 0) {

            $data = array();

            foreach ($champions as $champion) {

                $habilites = array();
                $stats = array();
                $tips = array();

                foreach ($champion_habilities as $hability) {
                    if($hability['champion'] == $champion['id']){

                        array_push($habilites, array(
                            'id' => $hability['id'],
                            'name' => $hability['name'],
                            'description' => $hability['description'],
                            'effect' => $hability['effect'],
                            'cost' => $hability['cost'],
                            'range' => $hability['range'],
                            'image' => base_url().'resources/spells/'.$champion['id'].'-'.$hability['id'].'.png'
                        ));
                    }
                }

                foreach ($champion_stats as $statss) {
                    if($statss['champion'] == $champion['id']){

                        array_push($stats, array(
                            'name' => $statss['name'],
                            'value' => $statss['value'],
                            'modifier_per_level' => $statss['modifier_per_level']
                        ));
                    }
                }

                foreach ($champion_tips as $tipss) {
                    if($tipss['champion'] == $champion['id']){

                        array_push($tips, array(
                            'id' => $tipss['id'],
                            'tip' => $tipss['tip']
                        ));
                    }
                }

                array_push($data, array(
                    'id' => $champion['id'],
                    'name' => $champion['name'],
                    'title' => $champion['title'],
                    'lore' => $champion['lore'],
                    'tags' => $champion['tags'],
                    'image' => base_url().'resources/portraits/'.$champion['id'].'.jpg',
                    'icon' => base_url().'resources/icons/'.$champion['id'].'.jpg',
                    'habilities' => $habilites,
                    'stats' => $stats,
                    'tips' => $tips
                ));
            }

            $siguiente_pagina = 0;

            if ($this->uri->segment(5) == null) {
                $siguiente_pagina = $per_page;

                $this->response([
                    'status' => true,
                    'uri_segment' => $this->uri->segment(5),
                    'error' => false,
                    'message' => "OK",
                    'system_code' => $this->code01,
                    'data' => $data,
                    'next_page' => 'http://localhost/championsApi/api/v1/champions/get_all/' . $siguiente_pagina,
                ], 200);
            } else {
                $siguiente_pagina = $this->uri->segment(5) + $per_page;

                $antes_pagina = $this->uri->segment(5) - $per_page;

                $ultimaPagina = $antes_pagina < 0 ? 0 : $antes_pagina;

                $this->response([
                    'status' => true,
                    'uri_segment' => $this->uri->segment(5),
                    'last_page' => 'http://localhost/championsApi/api/v1/champions/get_all/' . $ultimaPagina,
                    'error' => false,
                    'message' => "OK",
                    'system_code' => $this->code01,
                    'data' => $data,
                    'next_page' => 'http://localhost/championsApi/api/v1/champions/get_all/' . $siguiente_pagina,
                ], 200);
            }

        } else {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR',
                'system_code' => $this->code02,
            ], 200);
        }
    }

    public function get_get()
    {
        $id_champion = trim($this->get('id', true));

        $champion = $this->Champions_model->get_champion($id_champion);

        $habilites = $this->Habilities_model->get_habilities_by_champion($id_champion);

        $habilites_new = array();

        foreach ($habilites as $hability) {
            if($hability['champion'] == $champion['id']){

                array_push($habilites_new, array(
                    'id' => $hability['id'],
                    'name' => $hability['name'],
                    'description' => $hability['description'],
                    'effect' => $hability['effect'],
                    'cost' => $hability['cost'],
                    'range' => $hability['range'],
                    'image' => base_url().'resources/spells/'.$champion['id'].'-'.$hability['id'].'.png'
                ));
            }
        }

        $stats = $this->Stats_model->get_stats_by_champion($id_champion);

        $stats_new = array();

        foreach ($stats as $statss) {
            if($statss['champion'] == $champion['id']){

                array_push($stats_new, array(
                    'name' => $statss['name'],
                    'value' => $statss['value'],
                    'modifier_per_level' => $statss['modifier_per_level']
                ));
            }
        }

        $tips = $this->Tips_model->get_all_tips();
        $tips_new = array();

        foreach ($tips as $tipss) {
            if($tipss['champion'] == $champion['id']){

                array_push($tips_new, array(
                    'id' => $tipss['id'],
                    'tip' => $tipss['tip']
                ));
            }
        }

        $campeon = array();

        array_push($campeon, array(
            'id' => $champion['id'],
            'name' => $champion['name'],
            'title' => $champion['title'],
            'lore' => $champion['lore'],
            'tags' => $champion['tags'],
            'image' => base_url().'resources/portraits/'.$champion['id'].'.jpg',
            'icon' => base_url().'resources/icons/'.$champion['id'].'.jpg',
            'habilities' => $habilites_new,
            'stats' => $stats_new,
            'tips' => $tips_new
        ));

        if ($champion != null) {
            $this->response([
                'status' => true,
                'error' => false,
                'message' => "OK",
                'system_code' => $this->code01,
                'data' => $campeon,
            ], 200);
        } else {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR',
                'system_code' => $this->code03,
            ], 200);
        }
    }

    public function add_post()
    {
        $name = $this->post('name');
        $title = $this->post('title');
        $lore = $this->post('lore');
        $tags = $this->post('tags');

        if ($name == '' || $title == '' || $lore == '' || $tags == '') {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR',
                'system_code' => $this->code03,
            ], 400);
        } else {
            $ultimo_id = $this->Champions_model->get_last_id();

            $nuevo_id = $ultimo_id + 1;

            $champion = array(
                'id' => $nuevo_id,
                'name' => $name,
                'title' => $title,
                'lore' => $lore,
                'tags' => $tags,
            );

            $id_champion = $this->Champions_model->add_champion($champion);

            $champion = $this->Champions_model->get_champion($nuevo_id);

            if ($champion != null) {
                $this->response([
                    'status' => true,
                    'error' => false,
                    'message' => "OK",
                    'system_code' => $this->code01,
                    'data' => $champion,
                ], 200);
            } else {
                $this->response([
                    'status' => false,
                    'error' => true,
                    'message' => 'ERROR',
                    'system_code' => $this->code03,
                ], 200);
            }
        }
    }

    public function delete_post()
    {
        $id_champion = $this->post('id_champion');

        if ($id_champion != '') {
            $status_borrado = $this->Champions_model->delete_champion($id_champion);
            if($status_borrado){
                $this->response([
                    'status' => true,
                    'error' => false,
                    'message' => 'OK',
                    'system_code' => $this->code01,
                ], 200);
            }else{
                $this->response([
                    'status' => false,
                    'error' => true,
                    'message' => 'ERROR',
                    'system_code' => $this->code02,
                ], 200);
            }
        } else {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR: '.$this->code03,
                'system_code' => $this->code03,
            ], 200);
        }
    }

    public function update_post()
    {
        $id_champ = $this->post('id_champ');
        $name = $this->post('name');
        $champ_key = $this->post('champ_key');
        $title = $this->post('title');
        $description = $this->post('description');

        if ($name == '' || $champ_key == '' || $title == '' || $description == '' || $id_champ == '') {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'Faltan Argumentos.',
            ], 400);
        } else {

            $champion = $this->Champions_model->get_champion($id_champ);

            if (isset($champion['id'])) {
                $params = array(
                    'name' => $name,
                    'champ_key' => $champ_key,
                    'title' => $title,
                    'description' => $description,
                );
    
                if ($this->Champions_model->update_champion($params,$id_champ)) {

                    $championNew = $this->Champions_model->get_champion($id_champ);

                    $this->response([
                        'status' => true,
                        'error' => false,
                        'message' => "OK",
                        'system_code' => $this->code01,
                        'data' => $championNew,
                    ], 200);
                } else {
                    $this->response([
                        'status' => false,
                        'error' => true,
                        'message' => 'ERROR',
                        'system_code' => $this->code04,
                    ], 200);
                }
            }else{
                $this->response([
                    'status' => false,
                    'error' => true,
                    'message' => 'ERROR',
                    'system_code' => $this->code03,
                ], 200);
            }
        }
    }

    public function login()
    {
        $this->_apiConfig([
            'methods' => ['POST','GET'],
            'requireAuthorization' => true
        ]);
    }

    
}
